import asyncpg
from asyncpg.exceptions import DuplicateTableError, UniqueViolationError

q_create_forms = 'CREATE TABLE forms (' \
                 'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
                 'name VARCHAR(256),' \
                 'email VARCHAR(256),' \
                 'year INTEGER,' \
                 'gender VARCHAR(256),' \
                 'limbs VARCHAR(256),' \
                 'superpowers TEXT[],' \
                 'biography TEXT)'

q_insert_form = 'INSERT INTO forms (name, email, year, gender, limbs, superpowers, biography) VALUES (($1), ($2), ' \
                '($3), ($4), ($5), ($6), ($7))'

q_create_users = 'CREATE TABLE users (' \
                 'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
                 'login VARCHAR(256),' \
                 'password VARCHAR(256))'

q_get_generated_login = 'SELECT last_value + 1 FROM users_id_seq;'

q_insert_new_user = 'INSERT INTO users (login, password) VALUES (($1), ($2));'

q_update_user_sid = 'UPDATE users SET sid=($1) WHERE login=($2);'

q_get_password = 'SELECT password FROM users WHERE login=($1);'

q_create_u2f = 'CREATE TABLE users_forms (' \
               'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
               'user_id bigint REFERENCES users(id),' \
               'form_id bigint REFERENCES forms(id))'


async def create_tables():
    con = await asyncpg.connect(user='kmx', database='back')
    try:
        await con.execute(q_create_forms)
    except DuplicateTableError:
        print("Table forms already exists")
    try:
        await con.execute(q_create_users)
    except DuplicateTableError:
        print("Table users already exists")
    try:
        await con.execute(q_create_u2f)
    except DuplicateTableError:
        print("Table users_forms already exists")
    await con.close()


async def get_generated_user():
    con = await asyncpg.connect(user='kmx', database='back')
    generated_login = await con.fetchval(q_get_generated_login)
    await con.close()
    return generated_login


async def insert_user(login, password):
    con = await asyncpg.connect(user='kmx', database='back')
    try:
        await con.execute(q_insert_new_user, login, password)
    except UniqueViolationError:
        raise KeyError
    await con.close()


async def update_sid(login, sid):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_update_user_sid, sid, login)
    await con.close()


async def get_password(login):
    con = await asyncpg.connect(user='kmx', database='back')
    pwd = await con.fetchval(q_get_password, login)
    await con.close()
    return pwd


async def insert_form(data):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_insert_form, data['entity_name'], data['entity_email'], int(data['entity_birth']),
                      data['gender-group'], data['limbs'], data.getall('superpowers'), data['bio'])
    await con.close()
