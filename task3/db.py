import asyncpg
from asyncpg.exceptions import DuplicateTableError, UniqueViolationError

q_create_forms = 'CREATE TABLE forms (' \
                 'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
                 'name VARCHAR(256),' \
                 'email VARCHAR(256),' \
                 'year INTEGER,' \
                 'gender VARCHAR(256),' \
                 'limbs VARCHAR(256),' \
                 'superpowers TEXT[],' \
                 'biography TEXT)'

q_insert_form = 'INSERT INTO forms (name, email, year, gender, limbs, superpowers, biography) VALUES (($1), ($2), ' \
                '($3), ($4), ($5), ($6), ($7))'

q_get_form_by_id = 'SELECT * FROM forms WHERE id=($1);'

q_get_last_form_id = 'SELECT last_value FROM forms_id_seq;'

q_create_users = 'CREATE TABLE users (' \
                 'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
                 'login VARCHAR(256),' \
                 'password VARCHAR(256),' \
                 'sid VARCHAR(256));'

q_get_generated_login = 'SELECT last_value + 1 FROM users_id_seq;'

q_insert_new_user = 'INSERT INTO users (login, password) VALUES (($1), ($2));'

q_update_user_sid = 'UPDATE users SET sid=($1) WHERE login=($2);'

q_get_password = 'SELECT password FROM users WHERE login=($1);'

q_get_login_by_sid = 'SELECT login FROM users WHERE sid=($1)'
q_get_uid_by_sid = 'SELECT id FROM users WHERE sid=($1)'

q_fetch_all_forms = 'SELECT * FROM forms'

q_create_u2f = 'CREATE TABLE users_forms (' \
               'id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,' \
               'user_id bigint REFERENCES users(id),' \
               'form_id bigint REFERENCES forms(id))'

q_fetch_forms_by_user_id = 'SELECT f.* FROM forms f WHERE f.id IN (SELECT form_id FROM users_forms WHERE user_id=($1));'

q_insert_u2f = 'INSERT INTO users_forms (user_id, form_id) VALUES (($1), ($2));'

q_update_form = 'UPDATE forms SET (name, email, year, gender, limbs, superpowers, biography) = (($1), ($2), ' \
                '($3), ($4), ($5), ($6), ($7)) WHERE id = ($8);'

q_get_admin_password = 'SELECT password FROM admins WHERE login=($1)'

q_delete_form_by_id = 'DELETE FROM forms WHERE id=($1)'

q_delete_all_forms = 'DELETE FROM forms'


async def create_tables():
    con = await asyncpg.connect(user='kmx', database='back')
    try:
        await con.execute(q_create_forms)
    except DuplicateTableError:
        print("Table forms already exists")
    try:
        await con.execute(q_create_users)
    except DuplicateTableError:
        print("Table users already exists")
    try:
        await con.execute(q_create_u2f)
    except DuplicateTableError:
        print("Table users_forms already exists")
    await con.close()


async def get_generated_user():
    con = await asyncpg.connect(user='kmx', database='back')
    generated_login = await con.fetchval(q_get_generated_login)
    await con.close()
    return generated_login


async def insert_user(login, password):
    con = await asyncpg.connect(user='kmx', database='back')
    try:
        await con.execute(q_insert_new_user, login, password)
    except UniqueViolationError:
        raise KeyError
    await con.close()


async def update_sid(login, sid):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_update_user_sid, sid, login)
    await con.close()


async def get_password(login):
    con = await asyncpg.connect(user='kmx', database='back')
    pwd = await con.fetchval(q_get_password, login)
    await con.close()
    return pwd


async def get_login_by_sid(sid):
    con = await asyncpg.connect(user='kmx', database='back')
    login = await con.fetchval(q_get_login_by_sid, sid)
    await con.close()
    return login


async def get_uid_by_sid(sid):
    con = await asyncpg.connect(user='kmx', database='back')
    uid = await con.fetchval(q_get_uid_by_sid, sid)
    await con.close()
    return uid


async def insert_form(data):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_insert_form, data['entity_name'], data['entity_email'], int(data['entity_birth']),
                      data['gender-group'], data['limbs'], data.getall('superpowers'), data['bio'])
    await con.close()


async def update_form(fid, data):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_update_form, data['entity_name'], data['entity_email'], int(data['entity_birth']),
                      data['gender-group'], data['limbs'], data.getall('superpowers'), data['bio'], fid)
    await con.close()


async def get_form_by_id(fid):
    con = await asyncpg.connect(user='kmx', database='back')
    form_row = await con.fetchrow(q_get_form_by_id, fid)
    await con.close()
    return form_row


async def get_last_fid():
    con = await asyncpg.connect(user='kmx', database='back')
    fid = await con.fetchval(q_get_last_form_id)
    await con.close()
    return fid


async def get_forms_by_uid(user_id):
    con = await asyncpg.connect(user='kmx', database='back')
    records = await con.fetch(q_fetch_forms_by_user_id, user_id)
    await con.close()
    return records


async def insert_u2f(user_id, form_id):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_insert_u2f, user_id, form_id)
    await con.close()


async def get_admin_password(login):
    con = await asyncpg.connect(user='kmx', database='back')
    password = await con.fetchval(q_get_admin_password, login)
    await con.close()
    return password


async def fetch_all_forms():
    con = await asyncpg.connect(user='kmx', database='back')
    records = await con.fetch(q_fetch_all_forms)
    await con.close()
    return records


async def delete_form_by_id(rid):
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_delete_form_by_id, rid)
    await con.close()


async def delete_all_forms():
    con = await asyncpg.connect(user='kmx', database='back')
    await con.execute(q_delete_all_forms)
    await con.close()
